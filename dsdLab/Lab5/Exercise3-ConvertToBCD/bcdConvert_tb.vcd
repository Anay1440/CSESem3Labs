$date
	Mon Sep 19 20:55:06 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module bcdConvert_tb $end
$var wire 4 ! y [3:0] $end
$var reg 4 " x [3:0] $end
$scope module bcdConv $end
$var wire 4 # nine [3:0] $end
$var wire 4 $ x [3:0] $end
$var wire 4 % y [3:0] $end
$var wire 1 & c3 $end
$var wire 4 ' c [3:0] $end
$var reg 1 ( b $end
$scope module ad $end
$var wire 1 ) cin $end
$var wire 4 * x [3:0] $end
$var wire 4 + y [3:0] $end
$var wire 4 , s [3:0] $end
$var wire 1 & cout $end
$var wire 3 - c [3:1] $end
$scope module stage0 $end
$var wire 1 . a $end
$var wire 1 / b $end
$var wire 1 ) cin $end
$var wire 1 0 cout $end
$var wire 1 1 s $end
$upscope $end
$scope module stage1 $end
$var wire 1 2 a $end
$var wire 1 3 b $end
$var wire 1 4 cin $end
$var wire 1 5 cout $end
$var wire 1 6 s $end
$upscope $end
$scope module stage2 $end
$var wire 1 7 a $end
$var wire 1 8 b $end
$var wire 1 9 cin $end
$var wire 1 : cout $end
$var wire 1 ; s $end
$upscope $end
$scope module stage3 $end
$var wire 1 < a $end
$var wire 1 = b $end
$var wire 1 > cin $end
$var wire 1 & cout $end
$var wire 1 ? s $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0?
1>
0=
1<
0;
1:
19
18
07
06
15
04
13
12
01
00
0/
0.
b110 -
b0 ,
b110 +
b1010 *
0)
1(
b110 '
1&
b0 %
b1010 $
b1001 #
b1010 "
b0 !
$end
#20
09
b100 -
05
16
b10 !
b10 %
b10 ,
0;
02
17
b110 '
b110 +
1(
b1100 "
b1100 $
b1100 *
#40
